This directory has some demo files for different python multiprocessing functions. 
They can serve as useful templates and inspiration for your own code. Below, I've 
listed some good-to-know bits of info. 


max_processors:
	This value is best set around 1.5x, where x is the number of cores on your 
	computer. You want slightly more processes than cores, to be sure all cpu 
	cycles are used, but not so many processes that they're constantly thrashing 
	or fighting for time. Longer tasks will do better with lower values like 1.2,
	while shorter tasks will do better with higher values like 1.8. The exact 
	value of this number ends up not being very critical. 

map vs apply:
	-Pool.map() splits input data into many chunks, then gives each process a chunk 
	to complete in parallel. This is good for tasks where you want to call the 
	same function on many pieces of data independently. (It is similar in use 
	cases to R's apply() function). This tends to be useful less often than the 
	other methods for data science / machine learning. 

	-Pool.apply() ties up your whole pool of processes with just one task. Basically, 
	you should never use this. 

	-Pool.apply_async() sends one job out to your pool, then returns immediately,
	while the main process continues to run. It can be called repeatedly in a loop,
	allowing you to queue up many tasks to execute in parallel. Because it is in a 
	pool, the library will manage the tasks so that only a managable number are 
	executing at any given point in time. apply_async() can take different data and 
	a different function each time, thereby giving you maximum control over what 
	executes and flexability to run different algorithms or specify different data 
	sets. This is often the best choice for data mining parallelization. 

Queues:
	When multiprocessing it is important to use the mp.Queue data type, as it is 
	safe for many threads or processes to access at once without data corruption. 
	Every function call on a queue will slow down your parallel processes by making
	them wait for the queue object to become free. Thus, you should try to call them 
	infrequently 
